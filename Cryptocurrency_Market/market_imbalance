from datetime import datetime, timedelta

class MarketImbalance:
    def __init__(self, timestamp, open_price, close_price, delta_to_be_filled_in, is_full_filled=False, was_fullfilled_at=None,
                 time_to_be_fullfilled=None, is_partially_filled=False, remaining_delta_open_price=None,
                 remaining_delta_to_be_filled_in=None, candles_of_identification=None, candles_of_fullfilling=None,
                 candles_of_partfilling=None):
        self.timestamp = timestamp  # Timestamp (as ID)
        self.open_price = open_price
        self.close_price = close_price
        self.delta_to_be_filled_in = delta_to_be_filled_in
        self.is_full_filled = is_full_filled
        self.was_fullfilled_at = was_fullfilled_at
        self.time_to_be_fullfilled = time_to_be_fullfilled
        self.is_partially_filled = is_partially_filled
        self.remaining_delta_open_price = remaining_delta_open_price
        self.remaining_delta_to_be_filled_in = remaining_delta_to_be_filled_in
        self.candles_of_identification = candles_of_identification
        self.candles_of_fullfilling = candles_of_fullfilling
        self.candles_of_partfilling = candles_of_partfilling

    def mark_as_full_filled(self, timestamp):
        self.is_full_filled = True
        self.was_fullfilled_at = timestamp

    def mark_as_partially_filled(self):
        self.is_partially_filled = True

    def update_time_to_be_fullfilled(self, current_candle_timestamp):
        if self.is_partially_filled:
            self.time_to_be_fullfilled = current_candle_timestamp - self.timestamp


    def update_remaining_deltas(self, remaining_delta_open_price, remaining_delta_to_be_filled_in):
        self.remaining_delta_open_price = remaining_delta_open_price
        self.remaining_delta_to_be_filled_in = remaining_delta_to_be_filled_in

    def add_candle_of_identification(self, candle):
        if self.candles_of_identification is None:
            self.candles_of_identification = []
        self.candles_of_identification.append(candle)

    def add_candle_of_fullfilling(self, candle):
        if self.candles_of_fullfilling is None:
            self.candles_of_fullfilling = []
        self.candles_of_fullfilling.append(candle)

    def add_candle_of_partfilling(self, candle):
        if self.candles_of_partfilling is None:
            self.candles_of_partfilling = []
        self.candles_of_partfilling.append(candle)
